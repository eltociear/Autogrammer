export const noSchemaTests = [
  'selec',
  'SELEC',
  'select *',
  'select fo',
  'select * from',
  'select * FROM',
  'SELECT * FROM',
  'select fromm from',
  'select col from table',
  'select col as foo from table',
  'SELECT col FROM table',
  'SELECT col FROM table;',
  'SELECT col FROM table WHERE',
  'SELECT col FROM table where',
  'SELECT foo, bar, baz FROM table;',
  'SELECT MIN(col) FROM table',
  'SELECT min(col) FROM table',
  'SELECT MAX(col) FROM table',
  'SELECT max(col) FROM table',
  'SELECT COUNT(col) FROM table',
  'SELECT count(col) FROM table',
  'SELECT SUM(col) FROM table',
  'SELECT sum(col) FROM table',
  'SELECT AVG(col) FROM table',
  'SELECT avg(col) FROM table',
  'SELECT col1, avg(col) FROM table',
  'SELECT col1, avg(col) as T1 FROM table',
  'SELECT avg(col) as T1 FROM table',
  'SELECT avg(col) as T1, sum(col2) as T2 FROM table',
  'SELECT col FROM table where col',
  'SELECT col FROM table WHERE col',
  'SELECT col FROM table WHERE col =',
  'SELECT col FROM table WHERE col = 1',
  'SELECT col FROM table WHERE col = 1;',
  'SELECT col FROM table WHERE col = true;',
  'SELECT col FROM table WHERE col = TRUE;',
  'SELECT col FROM table WHERE col = false;',
  'SELECT col FROM table WHERE col = FALSE;',
  'SELECT col FROM table WHERE col = null;',
  'SELECT col FROM table WHERE col = NULL;',
  'SELECT col FROM table WHERE col IS null;',
  'SELECT col FROM table WHERE col is NULL;',
  'SELECT col FROM table WHERE col = \'foo\'',
  'SELECT col FROM table WHERE col = "foo"',
  'SELECT col FROM table WHERE col = \'foo\';',
  'SELECT col FROM table WHERE col = "foo";',
  'SELECT col FROM table WHERE col = "foo" and bar > 1',
  'SELECT col FROM table WHERE col = "foo" AND bar > 1',
  'SELECT col FROM table WHERE col = "foo" or bar > 1',
  'SELECT col FROM table WHERE col = "foo" OR bar > 1',
  'SELECT col FROM table WHERE col IN ("foo")',
  'SELECT col FROM table WHERE col IN (\'foo\')',
  'SELECT col FROM table WHERE col in ("foo", "bar")',
  'SELECT col FROM table WHERE col BETWEEN 2 AND 10',
  'SELECT col FROM table WHERE col between 2 and 10',
  'SELECT col FROM table order by',
  'SELECT col FROM table order by col',
  'SELECT col FROM table order by col;',
  'SELECT col FROM table order by col desc',
  'SELECT col FROM table order by col DESC',
  'SELECT col FROM table order by col ASC',
  'SELECT col FROM table order by col asc',
  'SELECT col FROM table limit',
  'SELECT col FROM table limit 5',
  'SELECT col FROM table limit 5;',
  'SELECT col FROM table limit 2, ',
  'SELECT col FROM table limit 2, 5',
  'SELECT col FROM table limit 2, 5;',
  'SELECT distinct col FROM table;',
  'SELECT DISTINCT col FROM table;',
  'SELECT _col FROM table',
  'SELECT _c0O_l FROM table',
  'SELECT col FROM table T1',
  'SELECT column_name\\nFROM table1 T1, table1 T2',
  'SELECT column_name\\nFROM table1 T1,\\ntable1 T2',
  'SELECT column_name\\nFROM table1 T1, table1 T2\\n;',
  'SELECT DISTINCT col FROM table INNER',
  'SELECT DISTINCT col FROM table inner',
  'SELECT DISTINCT col FROM table JOIN',
  'SELECT DISTINCT col FROM table join',
  'SELECT DISTINCT col FROM table INNER JOIN',
  'SELECT DISTINCT col FROM table inner join',
  'SELECT DISTINCT col FROM table LEFT JOIN',
  'SELECT DISTINCT col FROM table left join',
  'SELECT DISTINCT col FROM table RIGHT JOIN',
  'SELECT DISTINCT col FROM table right join',
  'SELECT DISTINCT col FROM table OUTER JOIN',
  'SELECT DISTINCT col FROM table outer join',
  'SELECT DISTINCT col FROM table FULL OUTER JOIN',
  'SELECT DISTINCT col FROM table full outer join',
  'SELECT DISTINCT col FROM table FULL JOIN',
  'SELECT DISTINCT col FROM table full join',
  'SELECT col FROM table union SELECT col FROM table union',
  'SELECT col FROM table UNION SELECT col FROM table UNION select col from table',
  'SELECT col FROM table UNION ALL SELECT col FROM table union all select col from table',
  'SELECT col as col1 FROM t1 JOIN t2 ON t1.id = t2.id',
  'SELECT col as col1 FROM t1 T1 LEFT JOIN t2 T2 ON T1.id = T2.id WHERE T1.id = 1 GROUP BY col1',
  `SELECT teams.conference AS conference,\\nAVG(players.weight) AS average_weight\\n`,
  `SELECT teams.conference AS conference FROM benn.college_football_players players`,
  `SELECT conference FROM p JOIN foo ON foo.school_name = p.school_name`,
  `SELECT conference FROM p JOIN benn.college_football_teams teams\\nON teams.school_name = p.school_name`,
  `SELECT c FROM t ORDER BY AVG(c.f)`,

  // found queries
  `SELECT teams.conference AS conference,\\nAVG(players.weight) AS average_weight\\nFROM benn.college_football_players players\\nJOIN benn.college_football_teams teams\\nON teams.school_name = players.school_name\\nGROUP BY teams.conference\\nORDER BY AVG(players.weight) DESC`,

  // llm synthetic queries
  `SELECT first_name, last_name FROM employees WHERE department = 'Sales';`,
  `SELECT e.first_name, e.last_name, d.department_name, s.salary FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN salaries s ON e.employee_id = s.employee_id WHERE s.salary > 50000 AND d.department_name = 'Engineering' ORDER BY s.salary DESC;`,
  `SELECT p.product_name, c.category_name, s.supplier_name, p.price FROM products p JOIN categories c ON p.category_id = c.category_id JOIN suppliers s ON p.supplier_id = s.supplier_id WHERE p.price BETWEEN 100 AND 500 AND c.category_name = 'Electronics' ORDER BY p.product_name ASC;`,
  `SELECT order_id FROM orders WHERE o.order_date BETWEEN '2023-01-01' AND '2023-12-31'`,
  `SELECT order_id FROM orders GROUP BY o.order_id, o.order_date, c.customer_name`,
  `SELECT SUM(foo * bar) FROM orders`,
  `SELECT order_id FROM orders HAVING SUM(oi.quantity * oi.unit_price) > '2023-12-31'`,
  `SELECT order_id FROM orders HAVING SUM(oi.quantity * oi.unit_price) > 500`,
  `SELECT COUNT(*) FROM orders`,
  `SELECT COUNT(foo) FROM orders`,
  `SELECT order_id FROM orders HAVING SUM(oi.quantity * oi.unit_price) > 500`,
  `SELECT * FROM orders GROUP BY order_id HAVING foo IS NOT NULL;`,
  `SELECT order_id, COUNT(*) FROM orders GROUP BY order_id HAVING foo IS NOT NULL;`,
  `SELECT order_id, COUNT(*) FROM orders GROUP BY order_id HAVING foo = "foo";`,
  `SELECT order_id, COUNT(*) FROM orders GROUP BY order_id HAVING foo = true;`,
  `SELECT customer_name, COUNT(*) AS order_count FROM orders GROUP BY customer_name HAVING customer_name LIKE '%John%';`,
  `SELECT customer_name, COUNT(*) AS order_count FROM orders GROUP BY customer_name HAVING customer_name LIKE 'Jo%hn';`,
  `SELECT department, AVG(salary) AS average_salary FROM employees GROUP BY department HAVING AVG(salary) != 50000;`,
  `SELECT * FROM employees WHERE NOT department = 'Sales';`,
  `SELECT order_id FROM orders WHERE o.order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY o.order_id, o.order_date, c.customer_name HAVING SUM(oi.quantity * oi.unit_price) > 500 ORDER BY total_amount DESC;`,
  `SELECT o.order_id, o.order_date, c.customer_name, SUM(oi.quantity * oi.unit_price) AS total_amount FROM orders o JOIN order_items oi ON o.order_id = oi.order_id JOIN customers c ON o.customer_id = c.customer_id WHERE o.order_date BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY o.order_id, o.order_date, c.customer_name HAVING SUM(oi.quantity * oi.unit_price) > 500 ORDER BY total_amount DESC;`,
  `SELECT employee_id, salary, SUM(salary) OVER () AS total_salary FROM salaries;`,
  `SELECT employee_id, department_id, salary, SUM(salary) OVER (PARTITION BY department_id) AS total_salary_per_department FROM salaries;`,
  `SELECT employee_id, salary, SUM(salary) OVER (ORDER BY employee_id) AS running_total_salary FROM salaries;`,
  `SELECT employee_id, department_id, salary, SUM(salary) OVER (PARTITION BY department_id ORDER BY employee_id) AS running_total_salary_per_department FROM salaries;`,
  `SELECT employee_id, department_id, salary, SUM(salary) OVER (PARTITION BY department_id ORDER BY employee_id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_salary FROM salaries;`,
  `SELECT employee_id, department_id, salary, SUM(salary) OVER (PARTITION BY department_id ORDER BY employee_id rows between unbounded preceding and current row) AS cumulative_salary FROM salaries;`,
  `SELECT employee_id, department_id, salary, SUM(salary) OVER (PARTITION BY department_id ORDER BY employee_id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_salary FROM salaries;`,
  `SELECT employee_id, department_id, salary, SUM(salary) OVER (PARTITION BY department_id ORDER BY employee_id ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS moving_sum FROM salaries;`,
  `SELECT employee_id, department_id, salary, AVG(salary) OVER (PARTITION BY department_id ORDER BY employee_id ROWS BETWEEN 3 PRECEDING AND 3 FOLLOWING) AS moving_avg FROM salaries;`,
  `SELECT employee_id, department_id, salary, SUM(salary) OVER (PARTITION BY department_id ORDER BY employee_id ROWS BETWEEN CURRENT ROW AND 5 FOLLOWING) AS future_sum FROM salaries;`,
  `SELECT employee_id, department_id, salary, SUM(salary) OVER (PARTITION BY department_id ORDER BY employee_id ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS cumulative_future_salary FROM salaries;`,
  `SELECT employee_id, salary, SUM(salary) OVER (ORDER BY employee_id ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS rolling_sum_salary FROM salaries;`,
  `SELECT employee_id, salary, RANK() OVER (ORDER BY salary DESC) AS salary_rank FROM salaries;`,
  `SELECT employee_id, salary, DENSE_RANK() OVER (ORDER BY salary DESC) AS salary_rank FROM salaries;`,
  `SELECT employee_id, salary, ROW_NUMBER() OVER (ORDER BY salary DESC) AS salary_rank FROM salaries;`,
  `SELECT employee_id, salary, LEAD(salary, 1) OVER (ORDER BY employee_id) AS next_salary`,
  `SELECT employee_id, salary, LEAD(salary, 1, 0) OVER (ORDER BY employee_id) AS next_salary`,
  `SELECT employee_id, salary, LEAD(salary, 1) OVER (ORDER BY employee_id) AS next_salary, LAG(salary, 1) OVER (ORDER BY employee_id) AS previous_salary FROM salaries;`,
  `SELECT employee_id, salary, LEAD(salary, 1, 0) OVER (ORDER BY employee_id) AS next_salary, LAG(salary, 1) OVER (ORDER BY employee_id) AS previous_salary FROM salaries;`,
  `SELECT employee_id, department_id, salary, SUM(salary) OVER (PARTITION BY department_id ORDER BY employee_id RANGE BETWEEN INTERVAL '1' DAY PRECEDING AND CURRENT ROW) AS range_based_salary FROM salaries;`,
  `SELECT e.employee_id OVER (PARTITION BY e.employee_id) AS total_hours`,
  `SELECT e.employee_id FROM employees e ORDER BY last_name ASC, salary DESC`,
  `SELECT e.employee_id FROM employees e GROUP BY e.employee_id, e.first_name, e.last_name, d.department_name, s.salary, p.project_name HAVING COUNT(p.project_id) > 1 ORDER BY e.last_name ASC, s.salary DESC LIMIT 10`,
  `SELECT e.employee_id FROM employees e WHERE e.hire_date > '2020-01-01'`,
  `SELECT e.employee_id FROM employees e WHERE e.hire_date > '2020-01-01' AND s.salary > 50000`,
  `SELECT e.employee_id, e.first_name, e.last_name, d.department_name, s.salary, p.project_name, SUM(p.hours_worked) OVER (PARTITION BY e.employee_id) AS total_hours, AVG(s.salary + s.bonus) OVER (PARTITION BY d.department_id) AS avg_compensation_per_dept FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN salaries s ON e.employee_id = s.employee_id LEFT JOIN projects p ON e.employee_id = p.employee_id WHERE e.hire_date > '2020-01-01' AND s.salary > 50000 GROUP BY e.employee_id, e.first_name, e.last_name, d.department_name, s.salary, p.project_name HAVING COUNT(p.project_id) > 1 ORDER BY e.last_name ASC, s.salary DESC LIMIT 10`,
  `SELECT e.employee_id FROM departments LIMIT 10 OFFSET 5;`,
  `SELECT e.employee_id, e.first_name, e.last_name, d.department_name, s.salary, p.project_name, SUM(p.hours_worked) OVER (PARTITION BY e.employee_id) AS total_hours, AVG(s.salary + s.bonus) OVER (PARTITION BY d.department_id) AS avg_compensation_per_dept FROM employees e JOIN departments d ON e.department_id = d.department_id JOIN salaries s ON e.employee_id = s.employee_id LEFT JOIN projects p ON e.employee_id = p.employee_id WHERE e.hire_date > '2020-01-01' AND s.salary > 50000 GROUP BY e.employee_id, e.first_name, e.last_name, d.department_name, s.salary, p.project_name HAVING COUNT(p.project_id) > 1 ORDER BY e.last_name ASC, s.salary DESC LIMIT 10 OFFSET 5;`,
];
